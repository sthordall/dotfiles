set nocompatible

" Plugins {{{
call plug#begin('~/.vim/plugged')
Plug 'LnL7/vim-nix'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'airblade/vim-gitgutter'
Plug 'alx741/vim-hindent'
Plug 'blindFS/vim-taskwarrior'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dag/vim2hs'
Plug 'morhetz/gruvbox'
Plug 'shinchu/lightline-gruvbox.vim'
Plug 'eagletmt/ghcmod-vim'
Plug 'eagletmt/neco-ghc'
Plug 'elmcast/elm-vim'
Plug 'ervandew/supertab'
Plug 'fatih/vim-go'
Plug 'fsharp/vim-fsharp', { 'for': 'fsharp', 'do': 'make fsautocomplete' }
Plug 'itchyny/lightline.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/vim-easy-align'
Plug 'majutsushi/tagbar'
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'scrooloose/syntastic'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'vimwiki/vimwiki'
call plug#end()
" }}}

" Preference {{{
set smarttab
set expandtab
set tabstop=2
set smartindent
set autoindent
set ignorecase
set smartcase
set nu
set shiftwidth=2
set tw=80
set incsearch
set hlsearch
set relativenumber
set nocursorline
set background=dark
set lazyredraw
set listchars=tab:•\ ,trail:•,extends:»,precedes:«
set list
set foldmethod=indent
set foldenable
set foldlevelstart=10
set foldnestmax=10
colorscheme gruvbox
" }}}

" Mappings {{{
let mapleader=","
map <space> <leader>
map <space><space> <leader><leader>
nnoremap <leader><Tab> :NERDTreeToggle<CR>
nnoremap <leader>f :CtrlP<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nmap <leader><leader> :nohlsearch<CR>
map <C-l> :bnext<CR>
map <C-h> :bprevious<CR>
map <C-j> :bdelete<CR>
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>
autocmd FileType haskell map <silent> <leader>t :GhcModType<CR>
autocmd FileType haskell map <silent> <leader>T :GhcModTypeInsert<CR>
autocmd FileType haskell map <silent> <leader>c :GhcModTypeClear<CR>
autocmd FileType haskell map <silent> <leader>i :GhcModInfo<CR>
autocmd FileType haskell map <silent> <leader>I :GhcModInfoPreview<CR>
autocmd FileType haskell map <silent> <leader>l :GhcModLint<CR>
autocmd FileType haskell map <silent> <leader>e :GhcModExpand<CR>
autocmd FileType haskell map <silent> <leader>s :GhcModSigCodegen<CR>
" }}}

" Ignore {{{
set wildignore+=*/.stack-work/*
set wildignore+=*/packages/*
set wildignore+=*/tmp/*
set wildignore+=*/obj/*
set wildignore+=*/bin/*
set wildignore+=*/build/*
set wildignore+=*/elm-stuff/*
set wildignore+=*/.git/*
set wildignore+=*/.cabal-sandbox/*
set wildignore+=*.swp
set wildignore+=*.swo
set wildignore+=*.zip
set wildignore+=*.dll
set wildignore+=*.exe
set wildignore+=*.mdb
set wildignore+=*.pdb
set wildignore+=*.xml
set wildignore+=*.XML
set wildignore+=*.sigdata
set wildignore+=*.optdata
set wildignore+=*.gitattributes
set wildignore+=*.psmdcp
set wildignore+=*.srcsrv
set wildignore+=*.nupkg
set wildignore+=*.png
set wildignore+=*.jpg
set wildignore+=*.jpeg
set wildignore+=*.gif
set wildignore+=*.svg
set wildmode=longest,list,full
set wildmenu
set wildignorecase
" }}}

" Ack {{{
nnoremap <leader>a :Ack!<Space>
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
" }}}
"
" Lightline {{{
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ }
" }}}

" CtrlP {{{
let g:ctrlp_cmd = 'CtrlPCurWD'
let g:ctrlp_show_hidden = 1
let g:ctrlp_path_nolim = 1
let g:ctrlp_working_path_mode = ''
" }}}

" EasyAlign {{{
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
" }}}

" NERDTree {{{
let g:NERDTreeMinimalUI = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeIgnore = ['\.swp$', '^bin$', '^obj$', '^dist$']
" }}}

" SuperTab {{{
let g:SuperTabDefaultCompletionType = "context"
" }}}

" Syntastic {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
" }}}

" Tagbar {{{
nmap <leader>T :TagbarToggle<CR>
" }}}

" Elm {{{
let g:elm_syntastic_show_warnings = 1
" }}}

" Haskell {{{
let g:haskellmode_completion_ghc = 1
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
let g:haskell_tabular = 1
let g:hindent_on_save = 0
let g:hindent_indent_size = 2
let g:hindent_line_length = 100
" }}}

" F# {{{
let g:syntastic_fsharp_checkers=['']
let g:fsharp_only_check_errors_on_write = 1
let g:fsharp_completion_helptext = 0
let g:fsharp_map_keys = 1
let g:fsharp_map_gotodecl = 'g'
let g:fsharp_map_gobackfromdecl = 'b'
let g:fsharp_helptext_comments = 1
" }}}

" Vimwiki {{{
  let g:vimwiki_list = [{'path': '~/wiki/', 'syntax': 'markdown', 'ext': '.md'}]
" }}}

" GUI {{{
set guifont=Hack\ 11
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
" }}}
